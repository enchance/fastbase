{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Usage","text":"<p>Hello there</p>"},{"location":"class/fastbase-dependency/","title":"FastbaseDependency","text":"Source code in <code>fastbase/main.py</code> <pre><code>class FastbaseDependency:\n    engine: AsyncEngine\n    User: Type[UserMod]\n\n    # TESTME: Untested\n    @staticmethod\n    def verify_idtoken(authorization: Annotated[str, Header()]) -&gt; str:\n        \"\"\"\n        Dependency to verify if a Google **idtoken** is valid. Out of the decrypted data only the email is returned.\n\n        !!! tip \"Use with\"\n            Use with the `current_user` dependency which gets the User based on the email.\n\n        !!! example\n\n            ```python\n            @app.get('/', email: Annotated[str, Depends(verify_idtoken)]):\n                # Header:  Authorization=Bearer abc123...\n                ...\n            ```\n\n        :param authorization:   Bearer token taken taken from Google idtoken\n        :return:                Decrypted token data\n        :raises InvalidToken:   Token cannot be used e.g. it's expired, malformed, etc.\n        \"\"\"\n        try:\n            token = authorization.split(' ')[1]\n            token_data = auth.verify_id_token(token)\n            return token_data.pop('email')\n        except Exception:\n            raise InvalidToken()\n\n    # TESTME: Untested\n    async def current_user(self, email: Annotated[str, Depends(verify_idtoken)]) -&gt; Type[U]:\n        \"\"\"\n        Dependency for getting the user by their verified idtoken.\n\n        !!! tip \"Use with\"\n            Use with the `verify_idtoken` dependency which gets the User based on the email.\n\n        !!! example\n\n            ```python\n            @app.get('/', user: Annotated[User, Depends(current_user)]):\n                ...\n            ```\n\n\n        :param email:   Email taken from the bearer token\n        :return:        Valid user\n        :raises UserNotFoundError:  The user who owns the email doesn't exist\n        \"\"\"\n        return await self._current_user(email)\n\n    # TESTME: Untested\n    async def _current_user(self, email: str) -&gt; Type[U]:\n        \"\"\"\n        Get user by email for use in dependencies.\n        :param email:   Email taken from the idtoken\n        :return:        User\n        :raises UserNotFoundError:\n        \"\"\"\n        try:\n            async with AsyncSession(self.engine) as session:\n                user = await self.User.get_by_email(session, email)\n                return user\n        except Exception as _:\n            raise UserNotFoundError()\n</code></pre>"},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency-attributes","title":"Attributes","text":""},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency.User","title":"<code>User: Type[UserMod]</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency.engine","title":"<code>engine: AsyncEngine</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency-functions","title":"Functions","text":""},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency.current_user","title":"<code>current_user(email)</code>  <code>async</code>","text":"<p>Dependency for getting the user by their verified idtoken.</p> <p>Use with</p> <p>Use with the <code>verify_idtoken</code> dependency which gets the User based on the email.</p> <p>Example</p> <pre><code>@app.get('/', user: Annotated[User, Depends(current_user)]):\n    ...\n</code></pre> PARAMETER  DESCRIPTION <code>email</code> <p>Email taken from the bearer token</p> <p> TYPE: <code>Annotated[str, Depends(verify_idtoken)]</code> </p> RETURNS DESCRIPTION <code>Type[U]</code> <p>Valid user</p> RAISES DESCRIPTION <code>UserNotFoundError</code> <p>The user who owns the email doesn't exist</p> Source code in <code>fastbase/main.py</code> <pre><code>async def current_user(self, email: Annotated[str, Depends(verify_idtoken)]) -&gt; Type[U]:\n    \"\"\"\n    Dependency for getting the user by their verified idtoken.\n\n    !!! tip \"Use with\"\n        Use with the `verify_idtoken` dependency which gets the User based on the email.\n\n    !!! example\n\n        ```python\n        @app.get('/', user: Annotated[User, Depends(current_user)]):\n            ...\n        ```\n\n\n    :param email:   Email taken from the bearer token\n    :return:        Valid user\n    :raises UserNotFoundError:  The user who owns the email doesn't exist\n    \"\"\"\n    return await self._current_user(email)\n</code></pre>"},{"location":"class/fastbase-dependency/#fastbase.FastbaseDependency.verify_idtoken","title":"<code>verify_idtoken(authorization)</code>  <code>staticmethod</code>","text":"<p>Dependency to verify if a Google idtoken is valid. Out of the decrypted data only the email is returned.</p> <p>Use with</p> <p>Use with the <code>current_user</code> dependency which gets the User based on the email.</p> <p>Example</p> <pre><code>@app.get('/', email: Annotated[str, Depends(verify_idtoken)]):\n    # Header:  Authorization=Bearer abc123...\n    ...\n</code></pre> PARAMETER  DESCRIPTION <code>authorization</code> <p>Bearer token taken taken from Google idtoken</p> <p> TYPE: <code>Annotated[str, Header()]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>Decrypted token data</p> RAISES DESCRIPTION <code>InvalidToken</code> <p>Token cannot be used e.g. it's expired, malformed, etc.</p> Source code in <code>fastbase/main.py</code> <pre><code>@staticmethod\ndef verify_idtoken(authorization: Annotated[str, Header()]) -&gt; str:\n    \"\"\"\n    Dependency to verify if a Google **idtoken** is valid. Out of the decrypted data only the email is returned.\n\n    !!! tip \"Use with\"\n        Use with the `current_user` dependency which gets the User based on the email.\n\n    !!! example\n\n        ```python\n        @app.get('/', email: Annotated[str, Depends(verify_idtoken)]):\n            # Header:  Authorization=Bearer abc123...\n            ...\n        ```\n\n    :param authorization:   Bearer token taken taken from Google idtoken\n    :return:                Decrypted token data\n    :raises InvalidToken:   Token cannot be used e.g. it's expired, malformed, etc.\n    \"\"\"\n    try:\n        token = authorization.split(' ')[1]\n        token_data = auth.verify_id_token(token)\n        return token_data.pop('email')\n    except Exception:\n        raise InvalidToken()\n</code></pre>"},{"location":"class/fastbase/","title":"Fastbase","text":"<p>             Bases: <code>FastbaseDependency</code></p> Source code in <code>fastbase/main.py</code> <pre><code>class Fastbase(FastbaseDependency):\n    _instance = None\n    _lock = threading.Lock()\n    engine: AsyncEngine\n    redis: Redis | None\n    User: Type[UserMod]\n    user_defaults: dict\n    post_create: Callable[[AsyncSession, UserMod], Awaitable[None]]\n\n\n    def __new__(cls):\n        \"\"\"Singleton pattern\"\"\"\n        if cls._instance is None:\n            with cls._lock:\n                if not cls._instance:\n                    cls._instance = super().__new__(cls)\n        return cls._instance\n\n    # TESTME: Untested\n    def initialize(self, *,\n                   engine: AsyncEngine,\n                   redis: Redis | None = None,\n                   user_model: Type[UserMod],\n                   user_defaults: dict | None = None,\n                   post_create: Callable[[AsyncSession, U], Awaitable[None]] | None = None):\n        \"\"\"Use instead of __init__ since it uses the singleton pattern.\"\"\"\n        self.engine = engine\n        self.redis = redis\n        self.User = user_model\n        self.user_defaults = user_defaults or {}\n        self.post_create = post_create\n\n\n    # TESTME: Untested\n    def get_signin_router(self, user_schema: Type[UserBaseSchema] = UserBaseSchema):\n        \"\"\"\n        Router for when user signs in. An account is created in the db if the user doesn't exist.\n        :param user_schema: Response model\n        :return:\n        \"\"\"\n        router = APIRouter()\n\n        @router.post('/signin', response_model=user_schema)\n        async def signin(token: Annotated[str, Body(embed=True)]) -&gt; Type[Self]:\n            try:\n                token_data = auth.verify_id_token(token)\n            except Exception:\n                raise InvalidToken()\n\n            if email := token_data.get('email'):\n                async with AsyncSession(self.engine) as session:\n                    exists = await self.User.exists(session, EmailStr(email))   # noqa\n\n                    if not exists:\n                        display, *_ = email.partition('@')\n                        user = self.User(email=email, display=display, username=email, **self.user_defaults)\n                        session.add(user)\n                        await session.commit()\n                        await session.refresh(user)\n\n                        if self.post_create:\n                            try:\n                                await self.post_create(session, user)\n                            except Exception:\n                                raise CallbackError()\n                    else:\n                        user = await self.User.get_by_email(session, email)\n                    return user\n            raise InvalidToken()\n        return router\n</code></pre>"},{"location":"class/fastbase/#fastbase.Fastbase-attributes","title":"Attributes","text":""},{"location":"class/fastbase/#fastbase.Fastbase.User","title":"<code>User: Type[UserMod]</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase/#fastbase.Fastbase.engine","title":"<code>engine: AsyncEngine</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase/#fastbase.Fastbase.post_create","title":"<code>post_create: Callable[[AsyncSession, UserMod], Awaitable[None]]</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase/#fastbase.Fastbase.redis","title":"<code>redis: Redis | None</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase/#fastbase.Fastbase.user_defaults","title":"<code>user_defaults: dict</code>  <code>instance-attribute</code>","text":""},{"location":"class/fastbase/#fastbase.Fastbase-functions","title":"Functions","text":""},{"location":"class/fastbase/#fastbase.Fastbase.__new__","title":"<code>__new__()</code>","text":"<p>Singleton pattern</p> Source code in <code>fastbase/main.py</code> <pre><code>def __new__(cls):\n    \"\"\"Singleton pattern\"\"\"\n    if cls._instance is None:\n        with cls._lock:\n            if not cls._instance:\n                cls._instance = super().__new__(cls)\n    return cls._instance\n</code></pre>"},{"location":"class/fastbase/#fastbase.Fastbase.get_signin_router","title":"<code>get_signin_router(user_schema=UserBaseSchema)</code>","text":"<p>Router for when user signs in. An account is created in the db if the user doesn't exist.</p> PARAMETER  DESCRIPTION <code>user_schema</code> <p>Response model</p> <p> TYPE: <code>Type[UserBaseSchema]</code> DEFAULT: <code>UserBaseSchema</code> </p> RETURNS DESCRIPTION Source code in <code>fastbase/main.py</code> <pre><code>def get_signin_router(self, user_schema: Type[UserBaseSchema] = UserBaseSchema):\n    \"\"\"\n    Router for when user signs in. An account is created in the db if the user doesn't exist.\n    :param user_schema: Response model\n    :return:\n    \"\"\"\n    router = APIRouter()\n\n    @router.post('/signin', response_model=user_schema)\n    async def signin(token: Annotated[str, Body(embed=True)]) -&gt; Type[Self]:\n        try:\n            token_data = auth.verify_id_token(token)\n        except Exception:\n            raise InvalidToken()\n\n        if email := token_data.get('email'):\n            async with AsyncSession(self.engine) as session:\n                exists = await self.User.exists(session, EmailStr(email))   # noqa\n\n                if not exists:\n                    display, *_ = email.partition('@')\n                    user = self.User(email=email, display=display, username=email, **self.user_defaults)\n                    session.add(user)\n                    await session.commit()\n                    await session.refresh(user)\n\n                    if self.post_create:\n                        try:\n                            await self.post_create(session, user)\n                        except Exception:\n                            raise CallbackError()\n                else:\n                    user = await self.User.get_by_email(session, email)\n                return user\n        raise InvalidToken()\n    return router\n</code></pre>"},{"location":"class/fastbase/#fastbase.Fastbase.initialize","title":"<code>initialize(*, engine, redis=None, user_model, user_defaults=None, post_create=None)</code>","text":"<p>Use instead of init since it uses the singleton pattern.</p> Source code in <code>fastbase/main.py</code> <pre><code>def initialize(self, *,\n               engine: AsyncEngine,\n               redis: Redis | None = None,\n               user_model: Type[UserMod],\n               user_defaults: dict | None = None,\n               post_create: Callable[[AsyncSession, U], Awaitable[None]] | None = None):\n    \"\"\"Use instead of __init__ since it uses the singleton pattern.\"\"\"\n    self.engine = engine\n    self.redis = redis\n    self.User = user_model\n    self.user_defaults = user_defaults or {}\n    self.post_create = post_create\n</code></pre>"},{"location":"models/group/","title":"Group","text":"<p>             Bases: <code>IntPK</code>, <code>UpdatedAtMixin</code>, <code>SQLModel</code></p> Source code in <code>fastbase/models/Group.py</code> <pre><code>class Group(IntPK, UpdatedAtMixin, SQLModel, table=True):\n    __tablename__ = 'auth_group'\n    name: str = Field(max_length=20, unique=True)\n    description: str = Field(max_length=199, default='')\n    permissions: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])\n\n    def __repr__(self):\n        return modstr(self, 'name')\n\n    @classmethod\n    async def create(cls, session: AsyncSession, *,\n                     name: str,  permissions: set | None = None,\n                     description: str | None = None) -&gt; Self:\n        \"\"\"Create a new group. Requires group.create permission.\"\"\"\n        try:\n            group = cls(name=name, permissions=permissions, description=description)\n            session.add(group)\n            await session.commit()\n            await session.refresh(group)\n            return group\n        except IntegrityError:\n            raise\n\n    # PLACEHOLDER: To follow\n    @classmethod\n    async def delete(cls, name: str):\n        \"\"\"Delete a group. Updates cache.\"\"\"\n        pass\n\n    async def add_all(self, session: AsyncSession, permissions: set[str]):\n        \"\"\"Append new permissions to group. Requires group.update permission.\"\"\"\n        self.permissions = {*self.permissions, *permissions}                # noqa\n        session.add(self)\n        await session.commit()\n\n    async def reset(self, session: AsyncSession, permissions: set[str] | None = None):\n        \"\"\"Reset permissions. Requires group.reset permission.\"\"\"\n        self.permissions = permissions or []\n        session.add(self)\n        await session.commit()\n\n    async def describe(self, session: AsyncSession, description: str | None = None):\n        \"\"\"Change group description. Requires group.update permission.\"\"\"\n        self.description = description or ''\n        await session.commit()\n\n    # TESTME: Untested\n    @classmethod\n    async def collate(cls, session: AsyncSession, nameset: set[str]) -&gt; set[str]:\n        stmt = select(cls.permissions).where(cls.name.in_(nameset))\n        edata = await session.exec(stmt)\n        alldata = edata.all()\n\n        ss = set()\n        for i in alldata:\n            ss.update(i)\n        return ss\n</code></pre>"},{"location":"models/group/#fastbase.models.Group-attributes","title":"Attributes","text":""},{"location":"models/group/#fastbase.models.Group.__tablename__","title":"<code>__tablename__ = 'auth_group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/group/#fastbase.models.Group.description","title":"<code>description: str = Field(max_length=199, default='')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/group/#fastbase.models.Group.name","title":"<code>name: str = Field(max_length=20, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/group/#fastbase.models.Group.permissions","title":"<code>permissions: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/group/#fastbase.models.Group-functions","title":"Functions","text":""},{"location":"models/group/#fastbase.models.Group.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>fastbase/models/Group.py</code> <pre><code>def __repr__(self):\n    return modstr(self, 'name')\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.add_all","title":"<code>add_all(session, permissions)</code>  <code>async</code>","text":"<p>Append new permissions to group. Requires group.update permission.</p> Source code in <code>fastbase/models/Group.py</code> <pre><code>async def add_all(self, session: AsyncSession, permissions: set[str]):\n    \"\"\"Append new permissions to group. Requires group.update permission.\"\"\"\n    self.permissions = {*self.permissions, *permissions}                # noqa\n    session.add(self)\n    await session.commit()\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.collate","title":"<code>collate(session, nameset)</code>  <code>async</code> <code>classmethod</code>","text":"Source code in <code>fastbase/models/Group.py</code> <pre><code>@classmethod\nasync def collate(cls, session: AsyncSession, nameset: set[str]) -&gt; set[str]:\n    stmt = select(cls.permissions).where(cls.name.in_(nameset))\n    edata = await session.exec(stmt)\n    alldata = edata.all()\n\n    ss = set()\n    for i in alldata:\n        ss.update(i)\n    return ss\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.create","title":"<code>create(session, *, name, permissions=None, description=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create a new group. Requires group.create permission.</p> Source code in <code>fastbase/models/Group.py</code> <pre><code>@classmethod\nasync def create(cls, session: AsyncSession, *,\n                 name: str,  permissions: set | None = None,\n                 description: str | None = None) -&gt; Self:\n    \"\"\"Create a new group. Requires group.create permission.\"\"\"\n    try:\n        group = cls(name=name, permissions=permissions, description=description)\n        session.add(group)\n        await session.commit()\n        await session.refresh(group)\n        return group\n    except IntegrityError:\n        raise\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.delete","title":"<code>delete(name)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Delete a group. Updates cache.</p> Source code in <code>fastbase/models/Group.py</code> <pre><code>@classmethod\nasync def delete(cls, name: str):\n    \"\"\"Delete a group. Updates cache.\"\"\"\n    pass\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.describe","title":"<code>describe(session, description=None)</code>  <code>async</code>","text":"<p>Change group description. Requires group.update permission.</p> Source code in <code>fastbase/models/Group.py</code> <pre><code>async def describe(self, session: AsyncSession, description: str | None = None):\n    \"\"\"Change group description. Requires group.update permission.\"\"\"\n    self.description = description or ''\n    await session.commit()\n</code></pre>"},{"location":"models/group/#fastbase.models.Group.reset","title":"<code>reset(session, permissions=None)</code>  <code>async</code>","text":"<p>Reset permissions. Requires group.reset permission.</p> Source code in <code>fastbase/models/Group.py</code> <pre><code>async def reset(self, session: AsyncSession, permissions: set[str] | None = None):\n    \"\"\"Reset permissions. Requires group.reset permission.\"\"\"\n    self.permissions = permissions or []\n    session.add(self)\n    await session.commit()\n</code></pre>"},{"location":"models/role/","title":"Role","text":"<p>             Bases: <code>IntPK</code>, <code>UpdatedAtMixin</code>, <code>SQLModel</code></p> Source code in <code>fastbase/models/Role.py</code> <pre><code>class Role(IntPK, UpdatedAtMixin, SQLModel, table=True):\n    __tablename__ = 'auth_role'\n    name: str = Field(max_length=20, unique=True)\n    description: str | None = Field(max_length=199, default='')\n    groups: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])\n\n    def __repr__(self):\n        return modstr(self, 'name', 'description')\n\n    # TESTME: Untested\n    @classmethod\n    async def create(cls, session: AsyncSession, *, name:str, groups: set, description: str | None = None) -&gt; Self:\n        \"\"\"Create new role. Requires the role.create permission.\"\"\"\n        try:\n            role = cls(name=name, groups=groups, description=description)\n            session.add(role)\n            await session.commit()\n            await session.refresh(role)\n            return role\n        except IntegrityError:\n            raise\n\n    # TESTME: Untested\n    @classmethod\n    async def reset(cls, session: AsyncSession, id: int, groups: set) -&gt; Self:\n        \"\"\"Reset groups. Requires role.reset permission.\"\"\"\n        if role := await session.get(cls, id):\n            role.groups = groups\n            session.add(role)\n            await session.commit()\n        return role\n\n    # TESTME: Untested\n    @classmethod\n    async def describe(cls, session: AsyncSession, id: int, description: str) -&gt; Self:\n        \"\"\"Change role description. Requires role.update permission.\"\"\"\n        if role := await session.get(cls, id):\n            role.description = description\n            session.add(role)\n            await session.commit()\n        return role\n</code></pre>"},{"location":"models/role/#fastbase.models.Role-attributes","title":"Attributes","text":""},{"location":"models/role/#fastbase.models.Role.__tablename__","title":"<code>__tablename__ = 'auth_role'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/role/#fastbase.models.Role.description","title":"<code>description: str | None = Field(max_length=199, default='')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/role/#fastbase.models.Role.groups","title":"<code>groups: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/role/#fastbase.models.Role.name","title":"<code>name: str = Field(max_length=20, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/role/#fastbase.models.Role-functions","title":"Functions","text":""},{"location":"models/role/#fastbase.models.Role.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>fastbase/models/Role.py</code> <pre><code>def __repr__(self):\n    return modstr(self, 'name', 'description')\n</code></pre>"},{"location":"models/role/#fastbase.models.Role.create","title":"<code>create(session, *, name, groups, description=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create new role. Requires the role.create permission.</p> Source code in <code>fastbase/models/Role.py</code> <pre><code>@classmethod\nasync def create(cls, session: AsyncSession, *, name:str, groups: set, description: str | None = None) -&gt; Self:\n    \"\"\"Create new role. Requires the role.create permission.\"\"\"\n    try:\n        role = cls(name=name, groups=groups, description=description)\n        session.add(role)\n        await session.commit()\n        await session.refresh(role)\n        return role\n    except IntegrityError:\n        raise\n</code></pre>"},{"location":"models/role/#fastbase.models.Role.describe","title":"<code>describe(session, id, description)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Change role description. Requires role.update permission.</p> Source code in <code>fastbase/models/Role.py</code> <pre><code>@classmethod\nasync def describe(cls, session: AsyncSession, id: int, description: str) -&gt; Self:\n    \"\"\"Change role description. Requires role.update permission.\"\"\"\n    if role := await session.get(cls, id):\n        role.description = description\n        session.add(role)\n        await session.commit()\n    return role\n</code></pre>"},{"location":"models/role/#fastbase.models.Role.reset","title":"<code>reset(session, id, groups)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Reset groups. Requires role.reset permission.</p> Source code in <code>fastbase/models/Role.py</code> <pre><code>@classmethod\nasync def reset(cls, session: AsyncSession, id: int, groups: set) -&gt; Self:\n    \"\"\"Reset groups. Requires role.reset permission.\"\"\"\n    if role := await session.get(cls, id):\n        role.groups = groups\n        session.add(role)\n        await session.commit()\n    return role\n</code></pre>"},{"location":"models/usermod/","title":"UserMod","text":"<p>             Bases: <code>DTMixin</code>, <code>UuidPK</code>, <code>SQLModel</code></p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>class UserMod(DTMixin, UuidPK, SQLModel):\n    email: str = Field(max_length=190, unique=True)\n    username: str = Field(max_length=190, unique=True)\n    display: str = Field(max_length=199)\n    timezone: str | None = Field(max_length=190, default='+0000')\n\n    role: str = Field(max_length=20, default='user')\n    groups: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])\n    permissions: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])\n\n    is_verified: bool = Field(default=True)                     # TODO: Optional verification\n    is_active: bool = Field(default=True)                       # TODO: Optional activation\n    banned_at: datetime | None = Field(sa_column=Column(DateTime(timezone=True), nullable=True, index=True))\n\n    def __repr__(self):\n        return modstr(self, 'email')\n\n    # TESTME: Untested\n    @classmethod\n    async def get_by_email(cls, session: AsyncSession, email: str) -&gt; Type[Self]:\n        \"\"\"\n        Get User by their email.\n        :param session:     session\n        :param email:       User email\n        :return:            User\n        :raises NoResultFound: User doesn't exist\n        \"\"\"\n        stmt = select(cls).where(cls.email == email)\n        execdata = await session.exec(stmt)\n        data = execdata.one()\n        return data\n\n    # TESTME: Untested\n    @classmethod\n    async def get_by_id(cls, session: AsyncSession, uid: str) -&gt; Type[Self]:\n        \"\"\"\n        Get User by their id.\n        :param session:     session\n        :param uid:         User id\n        :return:            User\n        :raises NoResultFound: User doesn't exist\n        \"\"\"\n        data = await session.get(cls, UUID(uid))\n        return data\n\n    # TESTME: Untested\n    @classmethod\n    async def exists(cls, session: AsyncSession, email: EmailStr) -&gt; bool:\n        \"\"\"Check if a user exists\"\"\"\n        stmt = select(cls.id).where(cls.email == email)\n        execdata = await session.exec(stmt)\n        if _ := execdata.first():\n            return True\n\n    # TESTME: Untested\n    async def attach_group(self, session: AsyncSession, name: str,\n                           *, caching: Callable[[str, list], None] | None = None,\n                           async_callback: Callable[[str, list], Awaitable[None]] | None = None, ):\n        \"\"\"\n        Add group to user. Removes duplicates.\n        :param session:     AsyncSession\n        :param name:        Group name\n        :param caching:     Callback for caching data\n        :param async_callback:    Async callback for generic use\n        :return:            None\n        \"\"\"\n        # async with AsyncSession(async_engine) as sess: # noqa\n        # async with asynccontextmanager(get_session)() as sess: # noqa\n        #     user = await User.get_by_email(sess, 'admin@gmail.com', skip_cache=True)\n        if name not in self.groups:\n            groups = list({*self.groups, name})\n            self.groups = groups\n            await session.commit()\n\n            if caching:\n                caching(self.email, groups)\n            if async_callback:\n                await async_callback(self.email, groups)\n\n            return groups\n\n    # TESTME: Untested\n    async def detach_group(self, session: AsyncSession, name: str,\n                           *, caching: Callable[[str, list], None] | None = None,\n                           async_callback: Callable[[str, list], Awaitable[None]] | None = None) -&gt; set[str]:\n        \"\"\"\n        Remove group from user.\n        :param session:     AsyncSession\n        :param name:        Group name\n        :param caching:     Callback for caching data\n        :param async_callback:    Async callback for generic use\n        :return:            None\n        \"\"\"\n        if name in self.groups:\n            groups = set(self.groups)\n            groups.discard(name)\n            self.groups = list(groups)\n            await session.commit()\n\n            if caching:\n                caching(self.email, list(groups))\n            if async_callback:\n                await async_callback(self.email, list(groups))\n            return groups\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod-attributes","title":"Attributes","text":""},{"location":"models/usermod/#fastbase.models.UserMod.banned_at","title":"<code>banned_at: datetime | None = Field(sa_column=Column(DateTime(timezone=True), nullable=True, index=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.display","title":"<code>display: str = Field(max_length=199)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.email","title":"<code>email: str = Field(max_length=190, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.groups","title":"<code>groups: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.is_active","title":"<code>is_active: bool = Field(default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.is_verified","title":"<code>is_verified: bool = Field(default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.permissions","title":"<code>permissions: list[str] = Field(sa_column=Column(ARRAY(String)), default=[])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.role","title":"<code>role: str = Field(max_length=20, default='user')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.timezone","title":"<code>timezone: str | None = Field(max_length=190, default='+0000')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod.username","title":"<code>username: str = Field(max_length=190, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/usermod/#fastbase.models.UserMod-functions","title":"Functions","text":""},{"location":"models/usermod/#fastbase.models.UserMod.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>fastbase/models/UserMod.py</code> <pre><code>def __repr__(self):\n    return modstr(self, 'email')\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod.attach_group","title":"<code>attach_group(session, name, *, caching=None, async_callback=None)</code>  <code>async</code>","text":"<p>Add group to user. Removes duplicates.</p> PARAMETER  DESCRIPTION <code>session</code> <p>AsyncSession</p> <p> TYPE: <code>AsyncSession</code> </p> <code>name</code> <p>Group name</p> <p> TYPE: <code>str</code> </p> <code>caching</code> <p>Callback for caching data</p> <p> TYPE: <code>Callable[[str, list], None] | None</code> DEFAULT: <code>None</code> </p> <code>async_callback</code> <p>Async callback for generic use</p> <p> TYPE: <code>Callable[[str, list], Awaitable[None]] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <p>None</p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>async def attach_group(self, session: AsyncSession, name: str,\n                       *, caching: Callable[[str, list], None] | None = None,\n                       async_callback: Callable[[str, list], Awaitable[None]] | None = None, ):\n    \"\"\"\n    Add group to user. Removes duplicates.\n    :param session:     AsyncSession\n    :param name:        Group name\n    :param caching:     Callback for caching data\n    :param async_callback:    Async callback for generic use\n    :return:            None\n    \"\"\"\n    # async with AsyncSession(async_engine) as sess: # noqa\n    # async with asynccontextmanager(get_session)() as sess: # noqa\n    #     user = await User.get_by_email(sess, 'admin@gmail.com', skip_cache=True)\n    if name not in self.groups:\n        groups = list({*self.groups, name})\n        self.groups = groups\n        await session.commit()\n\n        if caching:\n            caching(self.email, groups)\n        if async_callback:\n            await async_callback(self.email, groups)\n\n        return groups\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod.detach_group","title":"<code>detach_group(session, name, *, caching=None, async_callback=None)</code>  <code>async</code>","text":"<p>Remove group from user.</p> PARAMETER  DESCRIPTION <code>session</code> <p>AsyncSession</p> <p> TYPE: <code>AsyncSession</code> </p> <code>name</code> <p>Group name</p> <p> TYPE: <code>str</code> </p> <code>caching</code> <p>Callback for caching data</p> <p> TYPE: <code>Callable[[str, list], None] | None</code> DEFAULT: <code>None</code> </p> <code>async_callback</code> <p>Async callback for generic use</p> <p> TYPE: <code>Callable[[str, list], Awaitable[None]] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>set[str]</code> <p>None</p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>async def detach_group(self, session: AsyncSession, name: str,\n                       *, caching: Callable[[str, list], None] | None = None,\n                       async_callback: Callable[[str, list], Awaitable[None]] | None = None) -&gt; set[str]:\n    \"\"\"\n    Remove group from user.\n    :param session:     AsyncSession\n    :param name:        Group name\n    :param caching:     Callback for caching data\n    :param async_callback:    Async callback for generic use\n    :return:            None\n    \"\"\"\n    if name in self.groups:\n        groups = set(self.groups)\n        groups.discard(name)\n        self.groups = list(groups)\n        await session.commit()\n\n        if caching:\n            caching(self.email, list(groups))\n        if async_callback:\n            await async_callback(self.email, list(groups))\n        return groups\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod.exists","title":"<code>exists(session, email)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Check if a user exists</p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>@classmethod\nasync def exists(cls, session: AsyncSession, email: EmailStr) -&gt; bool:\n    \"\"\"Check if a user exists\"\"\"\n    stmt = select(cls.id).where(cls.email == email)\n    execdata = await session.exec(stmt)\n    if _ := execdata.first():\n        return True\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod.get_by_email","title":"<code>get_by_email(session, email)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get User by their email.</p> PARAMETER  DESCRIPTION <code>session</code> <p>session</p> <p> TYPE: <code>AsyncSession</code> </p> <code>email</code> <p>User email</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Type[Self]</code> <p>User</p> RAISES DESCRIPTION <code>NoResultFound</code> <p>User doesn't exist</p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>@classmethod\nasync def get_by_email(cls, session: AsyncSession, email: str) -&gt; Type[Self]:\n    \"\"\"\n    Get User by their email.\n    :param session:     session\n    :param email:       User email\n    :return:            User\n    :raises NoResultFound: User doesn't exist\n    \"\"\"\n    stmt = select(cls).where(cls.email == email)\n    execdata = await session.exec(stmt)\n    data = execdata.one()\n    return data\n</code></pre>"},{"location":"models/usermod/#fastbase.models.UserMod.get_by_id","title":"<code>get_by_id(session, uid)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get User by their id.</p> PARAMETER  DESCRIPTION <code>session</code> <p>session</p> <p> TYPE: <code>AsyncSession</code> </p> <code>uid</code> <p>User id</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Type[Self]</code> <p>User</p> RAISES DESCRIPTION <code>NoResultFound</code> <p>User doesn't exist</p> Source code in <code>fastbase/models/UserMod.py</code> <pre><code>@classmethod\nasync def get_by_id(cls, session: AsyncSession, uid: str) -&gt; Type[Self]:\n    \"\"\"\n    Get User by their id.\n    :param session:     session\n    :param uid:         User id\n    :return:            User\n    :raises NoResultFound: User doesn't exist\n    \"\"\"\n    data = await session.get(cls, UUID(uid))\n    return data\n</code></pre>"}]}